@page "/"
@page "/login"
@attribute [AllowAnonymous]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Components.Authorization
@inject IServiceProviders ServiceProviders
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Login</h3>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label class="form-label">Username</label>
                        <input class="form-control" @bind="username" @onkeypress="HandleKeyPress" />
                    </div>
                    <div class="form-group mb-3">
                        <label class="form-label">Password</label>
                        <input class="form-control" type="password" @bind="password" @onkeypress="HandleKeyPress" />
                    </div>
                    <div class="d-grid">
                        <button class="btn btn-primary" @onclick="LoginPage" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            Login
                        </button>
                    </div>
                    @if (loginFailed)
                    {
                        <div class="alert alert-danger mt-3">
                            Invalid username or password.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string username = string.Empty;
    private string password = string.Empty;
    private bool loginFailed = false;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo("/HealthCheckSessions/HealthCheckSessionList");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoginPage();
        }
    }

    private async Task LoginPage()
    {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            loginFailed = true;
            await JSRuntime.InvokeVoidAsync("console.log", "Username or password is empty");
            return;
        }

        isLoading = true;
        loginFailed = false;
        StateHasChanged();

        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Attempting login for user: {username}");

            var user = await ServiceProviders.UserAccountService.GetUserAccount(username, password);

            await JSRuntime.InvokeVoidAsync("console.log", $"Login result: {(user != null ? "Success" : "Failed")}");

            if (user != null)
            {
                // Cast to CustomAuthStateProvider to access custom methods
                if (AuthStateProvider is CustomAuthStateProvider customAuthProvider)
                {
                    await customAuthProvider.MarkUserAsAuthenticated(username);
                    await JSRuntime.InvokeVoidAsync("console.log", "User marked as authenticated");
                    NavigationManager.NavigateTo("/HealthCheckSessions/HealthCheckSessionList");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("console.log", "AuthStateProvider is not CustomAuthStateProvider");
                    loginFailed = true;
                }
            }
            else
            {
                loginFailed = true;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Login error: {ex.Message}");
            loginFailed = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
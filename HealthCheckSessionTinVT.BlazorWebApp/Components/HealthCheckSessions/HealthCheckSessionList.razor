@page "/HealthCheckSessions/HealthCheckSessionList"
@using SMMS.Repositories.TinVT.Models
@using Microsoft.Extensions.Logging
@inject IHealthCheckSessionTinVTService HealthCheckSessionTinVTService
@inject NavigationManager Nav
@inject ILogger<HealthCheckSessionList> Logger

<div class="container-fluid my-4">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Health Check Sessions</h5>
            <button class="btn btn-light btn-sm" @onclick="NavigateToNew">
                <i class="bi bi-plus-lg me-1"></i> New Session
            </button>
        </div>
        <div class="card-body p-0">
            @if (loading)
            {
                <div class="p-3 text-center text-muted">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading data...</p>
                </div>
            }
            else if (healthCheckSessions == null || !healthCheckSessions.Any())
            {
                <div class="p-3 text-center text-muted">
                    <em>No health check sessions found.</em>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>#</th>
                                <th>Code</th>
                                <th>Title</th>
                                <th>Scheduled</th>
                                <th>Expected</th>
                                <th>Checked</th>
                                <th>Notified</th>
                                <th>Result</th>
                                <th>Students</th>
                                <th class="text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < healthCheckSessions.Count; i++)
                            {
                                var s = healthCheckSessions[i];
                                var index = i;
                                <tr>
                                    <th scope="row">@(index + 1)</th>
                                    <td>@s.SessionCode</td>
                                    <td>@s.Title</td>
                                    <td>@s.ScheduledCheckDate.ToString("yyyy-MM-dd")</td>
                                    <td>@s.TotalStudentsExpected</td>
                                    <td>@(s.TotalStudentsChecked ?? 0)</td>
                                    <td>
                                        @if (s.IsNotificationSent == true)
                                        {
                                            <span class="badge bg-success">Yes</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">No</span>
                                        }
                                    </td>
                                    <td>
                                        @if (s.IsResultSent == true)
                                        {
                                            <span class="badge bg-success">Yes</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">No</span>
                                        }
                                    </td>
                                    <td>
                                        @(s.HealthCheckStudentTinVts?.Count() ?? 0)
                                        <i class="bi bi-people-fill ms-1"></i>
                                    </td>
                                    <td class="text-end">
                                        <a href="/HealthCheckSessions/detail/@s.HealthCheckSessionTinVtid"
                                           class="btn btn-sm btn-outline-info me-1"
                                           title="View Details">
                                            <i class="bi bi-eye-fill"></i>
                                        </a>
                                        <a href="/HealthCheckSessions/form/@s.HealthCheckSessionTinVtid"
                                           class="btn btn-sm btn-outline-warning"
                                           title="Edit Session">
                                            <i class="bi bi-pencil-fill"></i>
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    <div class="mt-3">
        <button class="btn btn-secondary" @onclick="ReloadData">Reload Data</button>
    </div>
</div>

@code {
    private List<HealthCheckSessionTinVt> healthCheckSessions;
    private bool loading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;
            healthCheckSessions = await HealthCheckSessionTinVTService.GetAllAsync();
            Logger.LogInformation("Loaded {Count} health check sessions", healthCheckSessions?.Count ?? 0);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
            Logger.LogError(ex, "Error loading health check sessions");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task ReloadData()
    {
        await LoadData();
    }

    void NavigateToNew()
    {
        try
        {
            Logger.LogInformation("Navigating to new session form");
            Nav.NavigateTo("/HealthCheckSessions/form");
        }
        catch (Exception ex)
        {
            errorMessage = $"Navigation error: {ex.Message}";
            Logger.LogError(ex, "Error navigating to new session form");
        }
    }

    void NavigateToDetail(Guid id)
    {
        try
        {
            Logger.LogInformation("Navigating to session details for ID: {Id}", id);
            Nav.NavigateTo($"/HealthCheckSessions/detail/{id}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Navigation error: {ex.Message}";
            Logger.LogError(ex, "Error navigating to session details");
        }
    }

    void NavigateToEdit(Guid id)
    {
        try
        {
            Logger.LogInformation("Navigating to edit session for ID: {Id}", id);
            Nav.NavigateTo($"/HealthCheckSessions/form/{id}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Navigation error: {ex.Message}";
            Logger.LogError(ex, "Error navigating to edit session");
        }
    }
}
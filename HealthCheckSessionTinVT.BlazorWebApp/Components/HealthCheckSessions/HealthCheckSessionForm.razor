@page "/HealthCheckSessions/form/{SessionId:guid?}"
@using SMMS.Repositories.TinVT.Models
@using Microsoft.AspNetCore.Components
@inject IHealthCheckSessionTinVTService HealthCheckSessionTinVTService
@inject NavigationManager Nav

<h3>@(SessionId.HasValue ? "Edit" : "Create") Health Check Session</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (model == null)
{
    <p><em>Đang chuẩn bị form…</em></p>
}
else
{
    <EditForm Model="model"
              OnValidSubmit="HandleValidSubmit"
              FormName="healthCheckSessionForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Session Code</label>
                <InputText @bind-Value="model.SessionCode" class="form-control" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Title</label>
                <InputText @bind-Value="model.Title" class="form-control" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-4">
                <label class="form-label">Notification Date</label>
                <InputDate TValue="DateTime"
                           @bind-Value="model.NotificationDate"
                           class="form-control" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Consent Deadline</label>
                <InputDate TValue="DateTime"
                           @bind-Value="model.ConsentDeadline"
                           class="form-control" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Scheduled Date</label>
                <InputDate TValue="DateTime"
                           @bind-Value="model.ScheduledCheckDate"
                           class="form-control" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Total Students Expected</label>
                <InputNumber TValue="int"
                             @bind-Value="model.TotalStudentsExpected"
                             class="form-control" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Total Students Checked</label>
                <InputNumber TValue="int?"
                             @bind-Value="model.TotalStudentsChecked"
                             class="form-control"
                             disabled="@model.TotalStudentsChecked.HasValue" />
                <small class="text-muted">This is typically updated automatically</small>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="form-check mb-2">
                    <InputCheckbox @bind-Value="IsNotificationSent"
                                   class="form-check-input"
                                   id="isNotificationSent" />
                    <label class="form-check-label" for="isNotificationSent">
                        Is Notification Sent
                    </label>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-check">
                    <InputCheckbox @bind-Value="IsResultSent"
                                   class="form-check-input"
                                   id="isResultSent" />
                    <label class="form-check-label" for="isResultSent">
                        Is Result Sent
                    </label>
                </div>
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label">Notes</label>
            <InputTextArea @bind-Value="model.Notes"
                           class="form-control"
                           rows="3" />
        </div>

        <div class="mt-4">
            <button type="submit"
                    class="btn btn-success me-2"
                    disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                }
                Save
            </button>
            <button type="button"
                    class="btn btn-secondary"
                    @onclick="NavigateBackToList"
                    disabled="@isSubmitting">
                Cancel
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public Guid? SessionId { get; set; }

    private HealthCheckSessionTinVt model;
    private string errorMessage = string.Empty;
    private bool isSubmitting;

    // Wrappers cho 2 checkbox (model.IsX là nullable bool?)
    private bool IsNotificationSent
    {
        get => model?.IsNotificationSent ?? false;
        set { if (model != null) model.IsNotificationSent = value; }
    }

    private bool IsResultSent
    {
        get => model?.IsResultSent ?? false;
        set { if (model != null) model.IsResultSent = value; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (SessionId.HasValue)
            {
                model = await HealthCheckSessionTinVTService.GetByIdAsync(SessionId.Value);
            }
            else
            {
                model = new HealthCheckSessionTinVt
                {
                    HealthCheckSessionTinVtid = Guid.NewGuid(),
                    NotificationDate = DateTime.Today,
                    ConsentDeadline = DateTime.Today,
                    ScheduledCheckDate = DateTime.Today,
                    TotalStudentsExpected = 0,
                    IsNotificationSent = false,
                    IsResultSent = false
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;

        try
        {
            if (SessionId.HasValue)
            {
                model.UpdatedAt = DateTime.UtcNow;
                model.UpdatedBy = "TrungTin227";
                var ok = await HealthCheckSessionTinVTService.UpdateAsync(model);
                if (!ok)
                {
                    errorMessage = "Failed to update session!";
                    return;   // thoát hẳn, không vào phần navigation
                }
            }
            else
            {
                await HealthCheckSessionTinVTService.CreateAsync(model);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving: {ex.Message}";
            return;
        }
        finally
        {
            isSubmitting = false;
        }

        // Chuyển trang ra ngoài try/catch để NavigationException không bị hiểu là "error saving"
        Nav.NavigateTo("/HealthCheckSessions/HealthCheckSessionList");
    }


    private void NavigateBackToList()
        => Nav.NavigateTo("/HealthCheckSessions/HealthCheckSessionList");
}

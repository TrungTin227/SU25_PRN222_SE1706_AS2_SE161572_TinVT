@page "/account/login"
@using System.ComponentModel.DataAnnotations
@inject SMMS.Services.TinVT.IServiceProviders ServiceProviders
@inject NavigationManager Navigation

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>

<body class="body">
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" href="/">SMMS Health Check System</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
            </div>
        </nav>
    </header>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h3 class="text-center mb-0">Sign In</h3>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>@ErrorMessage
                            </div>
                        }

                        @if (IsLoading)
                        {
                            <div class="alert alert-info" role="alert">
                                <div class="d-flex align-items-center">
                                    <div class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></div>
                                    Signing in...
                                </div>
                            </div>
                        }

                        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                            <DataAnnotationsValidator />
                            
                            <div class="mb-3">
                                <label for="UserName" class="form-label">Username</label>
                                <InputText id="UserName" class="form-control" @bind-Value="loginModel.UserName" placeholder="Enter your username" />
                                <ValidationMessage For="@(() => loginModel.UserName)" class="text-danger small" />
                            </div>

                            <div class="mb-3">
                                <label for="Password" class="form-label">Password</label>
                                <InputText id="Password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Enter your password" />
                                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small" />
                            </div>

                            <div class="mb-3 form-check">
                                <InputCheckbox id="RememberMe" class="form-check-input" @bind-Value="loginModel.RememberMe" disabled="@IsLoading" />
                                <label class="form-check-label" for="RememberMe">
                                    Remember me
                                </label>
                            </div>

                            <div class="d-grid">
                                <button class="btn btn-primary" type="submit" disabled="@IsLoading">
                                    @if (IsLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    }
                                    Sign In
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>

@code {
    private LoginModel loginModel = new();
    private string ErrorMessage = string.Empty;
    private bool IsLoading = false;

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override void OnInitialized()
    {
        // Check if user is already logged in
        if (ServiceProviders.SessionService.IsLoggedIn())
        {
            var redirectUrl = !string.IsNullOrEmpty(ReturnUrl) ? ReturnUrl : "/";
            Navigation.NavigateTo(redirectUrl, forceLoad: true);
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = string.Empty;
            StateHasChanged();

            // Validate input
            if (!IsValidInput())
                return;

            // Authenticate user
            var user = await ServiceProviders.AuthenticationService.AuthenticateAsync(loginModel.UserName, loginModel.Password);

            if (user != null && !string.IsNullOrEmpty(user.UserName) && user.IsActive)
            {
                // Set user session
                ServiceProviders.SessionService.SetUserSession(
                    user.UserAccountId.ToString(), 
                    user.UserName, 
                    user.FullName ?? user.UserName
                );

                // Redirect to return URL or home
                var redirectUrl = !string.IsNullOrEmpty(ReturnUrl) ? ReturnUrl : "/";
                Navigation.NavigateTo(redirectUrl, forceLoad: true);
            }
            else
            {
                ErrorMessage = "Invalid username or password. Please check your credentials and try again.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred during sign in. Please try again later.";
            // In production, log the actual exception details
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private bool IsValidInput()
    {
        if (string.IsNullOrWhiteSpace(loginModel.UserName))
        {
            ErrorMessage = "Username is required.";
            return false;
        }

        if (string.IsNullOrWhiteSpace(loginModel.Password))
        {
            ErrorMessage = "Password is required.";
            return false;
        }

        if (!ServiceProviders.AuthenticationService.IsValidPassword(loginModel.Password))
        {
            ErrorMessage = "Password must be at least 6 characters long.";
            return false;
        }

        return true;
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, ErrorMessage = "Username cannot exceed 50 characters")]
        public string UserName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be between 6 and 100 characters")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; } = false;
    }
}
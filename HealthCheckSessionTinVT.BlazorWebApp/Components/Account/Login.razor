@page "/account/login"
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject SMMS.Services.TinVT.UserAccountService UserAccountService
@inject SMMS.Services.TinVT.ISessionService SessionService
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

<div class="container mt-5">
    <div class="row">
        <h2 class="text-center">Log in</h2>
        <div class="col-md-4 mx-auto">
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">@ErrorMessage</div>
            }

            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <div class="form-group mb-3">
                    <label for="UserName">User Name</label>
                    <InputText id="UserName" class="form-control" @bind-Value="loginModel.UserName" />
                </div>

                <div class="form-group mb-3">
                    <label for="Password">Password</label>
                    <InputText id="Password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                </div>

                <button type="submit" class="btn btn-primary w-100" disabled="@IsLoading">
                    @if (IsLoading)
                    {
                        <span>
                            <span class="spinner-border spinner-border-sm"></span>
                            Loading...
                        </span>
                    }
                    else
                    {
                        <span>Login</span>
                    }
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string ErrorMessage = string.Empty;
    private bool IsLoading = false;

    public class LoginModel
    {
        public string UserName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    protected override void OnInitialized()
    {
        // Nếu đã login, redirect về home
        if (SessionService.IsLoggedIn())
        {
            Navigation.NavigateTo("/", forceLoad: true);
        }
    }

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(loginModel.UserName) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            ErrorMessage = "Username and password are required.";
            return;
        }

        try
        {
            IsLoading = true;
            ErrorMessage = string.Empty;
            StateHasChanged(); // Force UI update

            var user = await UserAccountService.GetUserAccount(loginModel.UserName, loginModel.Password);

            if (user != null && user.IsActive == true)
            {
                // Sử dụng SessionService thay vì trực tiếp HttpContext
                SessionService.SetUserSession(
                    user.UserAccountId.ToString(),
                    user.UserName,
                    user.FullName ?? string.Empty
                );

                // Redirect immediately
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                ErrorMessage = "Invalid credentials or account inactive.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged(); // Force UI update
        }
    }
}